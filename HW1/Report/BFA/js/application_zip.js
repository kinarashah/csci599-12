/* implementation heavily influenced by http://bl.ocks.org/1166403 */

// define dimensions of graph
var m = [80, 80, 80, 80]; // margins
var w = 1200 - m[1] - m[3]; // width
var h = 500 - m[0] - m[2]; // height


// create a simple data array that we'll plot with a line (this array represents only the Y values, X will just be the index location)
var data = [1.0000000000,0.8162727563,0.8029918912,0.8084280074,0.8068986778,0.8079413013,0.8138665799,0.8165515550,0.8158512204,0.8163282409,0.8290346273,0.8178659319,0.8271661146,0.8179587373,0.8110555366,0.8226330221,0.8042387511,0.8089982523,0.8096778325,0.8119662558,0.8101688471,0.8135198726,0.8146499074,0.8155777779,0.8186385420,0.8200062528,0.8144485941,0.8224803030,0.8113706386,0.8161088888,0.8179285106,0.8275124932,0.9366932043,0.8052515824,0.8178447559,0.8212996390,0.8239991070,0.8147117394,0.8140197080,0.8242550336,0.8070932007,0.8152097333,0.8116049143,0.8226709957,0.8214054230,0.8247037463,0.8222290470,0.8252163700,0.8256159098,0.8374656853,0.8256908318,0.8278972685,0.8183495145,0.8292378920,0.8260674958,0.8328054470,0.8217898511,0.8254349525,0.8120560272,0.8266122627,0.8283207268,0.8196725408,0.8273377707,0.8328005352,0.7991561952,0.8068393477,0.8056819084,0.8143715364,0.8165215195,0.8178761275,0.8213235960,0.8256376083,0.8147875805,0.8274117256,0.8121549296,0.8200218110,0.8153865367,0.8232513458,0.8237437410,0.8323302605,0.8063808207,0.8099331962,0.8194171672,0.8243240713,0.8153337827,0.8198894047,0.8247472442,0.8237238536,0.8257621941,0.8155476016,0.8145019194,0.8227777628,0.8118928997,0.8178288808,0.8229854588,0.8306030641,0.8096945342,0.8600078951,0.8211063580,0.8643351360,0.8354426792,0.8927980429,0.8318732194,0.8375813112,0.8299588683,0.8651028314,0.8153874941,0.8349371169,0.8561539307,0.8443220395,0.8641076373,0.8801636640,0.8310880386,0.8187930354,0.8613697834,0.8537208379,0.8734036399,0.8377312029,0.8304669280,0.8325710459,0.8299902438,0.8388493772,0.8163872622,0.8246250416,0.8340314266,0.8219131903,0.8317767205,0.8356630572,0.7983907163,0.8014197062,0.8083447218,0.8150773853,0.8083133457,0.8137068891,0.8130868705,0.8168598128,0.8052618892,0.8150953426,0.8131308698,0.8274082533,0.8250427002,0.8291453727,0.8167271210,0.8258463053,0.8124179183,0.8184169507,0.8224804363,0.8228841641,0.8121677492,0.8184682504,0.8210980980,0.8198660706,0.8089228715,0.8152815750,0.8170017135,0.8222243000,0.8178708950,0.8210587094,0.8265343343,0.8320220307,0.7939016242,0.8045631709,0.8062839621,0.8158392532,0.8142942619,0.8133457212,0.8151018682,0.8241880791,0.8029400568,0.8134012573,0.8077811290,0.8184644565,0.8211615665,0.8207040428,0.8160069147,0.8275677468,0.8157114536,0.8332284164,0.8125363902,0.8182679623,0.8158383537,0.8174253095,0.8221981350,0.8256350600,0.8116464155,0.8177478300,0.8152036649,0.8235873467,0.8303486522,0.8227696182,0.8297481376,0.8350106190,0.8077271126,0.8177961022,0.8164525782,0.8243569742,0.8153376747,0.8161742205,0.8360981076,0.8242013380,0.8178668438,0.8266338574,0.8185438788,0.8248774570,0.8224305411,0.8212437223,0.8215829323,0.8300113998,0.7989041084,0.8140121370,0.8156966527,0.8256347457,0.8104840786,0.8144305223,0.8231445727,0.8235774162,0.8258208515,0.8172783141,0.8188545617,0.8257610174,0.8182642713,0.8227763756,0.8314920257,0.8356686514,0.8139285247,0.8264585812,0.8173617668,0.8217358260,0.8292362483,0.8288473187,0.8236198883,0.8262666314,0.8101629128,0.8207429278,0.8129491682,0.8241216945,0.8246044816,0.8219062260,0.8212204116,0.8357265232,0.8336914262,0.8244258638,0.8421227263,0.8296292710,0.8150527163,0.8204915609,0.8242934808,0.8307059870,0.8359204648,0.8408693464,0.8199396952,0.8301694530,0.8396832444,0.8277289905,0.8359186499,0.8510057438];

// X scale will fit all values from data[] within pixels 0-w
var x = d3.scale.linear().domain([0, data.length]).range([0, w]);
// Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)
var y = d3.scale.linear().domain([0, 1]).range([h, 0]);
// automatically determining max range can work something like this
// var y = d3.scale.linear().domain([0, d3.max(data)]).range([h, 0]);
// create a line function that can convert data[] into x and y points
var line = d3.svg.line()
// assign the X function to plot our line as we wish
.x(function(d,i) { 
    // verbose logging to show what's actually being done
    //console.log('Plotting X value for data point: ' + d + ' using index: ' + i + ' to be at: ' + x(i) + ' using our xScale.');
    // return the X coordinate where we want to plot this datapoint
    return x(i); 
})
.y(function(d) { 
    // verbose logging to show what's actually being done
    //console.log('Plotting Y value for data point: ' + d + ' to be at: ' + y(d) + " using our yScale.");
    // return the Y coordinate where we want to plot this datapoint
    return y(d); 
})

// Add an SVG element with the desired dimensions and margin.
var graph = d3.select("#graph").append("svg:svg")
    .attr("width", w + m[1] + m[3])
    .attr("height", h + m[0] + m[2])
    .append("svg:g")
    .attr("transform", "translate(" + m[3] + "," + m[0] + ")");
// create yAxis
var xAxis = d3.svg.axis().scale(x).ticks(30).tickSize(-h).tickSubdivide(true);
// Add the x-axis.
graph.append("svg:g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + h + ")")
    .call(xAxis);
// create left yAxis
var yAxisLeft = d3.svg.axis().scale(y).ticks(30).orient("left");
// Add the y-axis to the left
graph.append("svg:g")
    .attr("class", "y axis")
    .attr("transform", "translate(-25,0)")
    .call(yAxisLeft);

// Add the line by appending an svg:path element with the data line we created above
// do this AFTER the axes above so that the line is above the tick-lines
graph.append("svg:path").attr("d", line(data));

 //Create Title 
graph.append("text")
.attr("x", w / 2 )
.attr("y", 0)
.style("font-size", "20px") 
.style("text-anchor", "middle")
.text("75% of application/zip");

d3.text("data.csv", function(text) {
    data = d3.csv.parseRows(text);
    //console.log(d3.csv.parseRows(data));
});