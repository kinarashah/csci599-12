/* implementation heavily influenced by http://bl.ocks.org/1166403 */

// define dimensions of graph
var m = [80, 80, 80, 80]; // margins
var w = 1200 - m[1] - m[3]; // width
var h = 500 - m[0] - m[2]; // height


// create a simple data array that we'll plot with a line (this array represents only the Y values, X will just be the index location)
var data = [0.8961631889,0.7341672092,0.7160596070,0.7168405940,0.7155361141,0.7104248797,0.7081267336,0.7140788841,0.7096713912,0.6990489138,0.7749251981,0.6948878106,0.7108006307,0.7708272356,0.7061330068,0.7098240613,0.7063463622,0.7080296939,0.7026684150,0.6935127321,0.7373878117,0.7069349400,0.6965764263,0.6947599355,0.7112123843,0.7002550538,0.7048809337,0.7052505838,0.7138562194,0.7061748778,0.7093844354,0.7175723687,1.0000000000,0.7070197578,0.7202329339,0.7261052277,0.7833507876,0.7195446634,0.7094819654,0.7145084902,0.7443857137,0.7309497401,0.7150863700,0.7199097887,0.7098141786,0.7247246366,0.7588837552,0.8172175429,0.8926222852,0.7984348167,0.7927061137,0.7792035743,0.7820031865,0.7913162363,0.7836233944,0.7735561926,0.7792173140,0.7702557496,0.7433492566,0.7236438728,0.7701220452,0.7234939352,0.7696380731,0.7310767366,0.7240201709,0.7415975671,0.7218744073,0.7308260623,0.7323985894,0.7450049187,0.7516150756,0.7364752941,0.7308107875,0.8003446635,0.7338883987,0.7250396595,0.7193897039,0.7267282110,0.7258717263,0.7338666042,0.7374173102,0.7365692472,0.7661675495,0.7398365582,0.7381502953,0.7280712012,0.7245998955,0.7301040506,0.7207614848,0.7169390055,0.7254983482,0.7271441713,0.7126514197,0.7266501510,0.7196143776,0.7190659845,0.7098657957,0.7756311775,0.7516162778,0.7635844228,0.7664262630,0.8267016438,0.7383453889,0.7364927813,0.7371161519,0.7683079747,0.7475287516,0.7324993440,0.7596592947,0.7642766357,0.7887517207,0.7917460404,0.7542686731,0.7311323494,0.7729943651,0.7658665792,0.8022225097,0.7481296334,0.7238034358,0.7166218910,0.7411038750,0.7295395257,0.7132846229,0.7193065261,0.7033750411,0.7111073765,0.7185083375,0.7294210051,0.7259051481,0.7025789953,0.7034420578,0.7025099853,0.6974035325,0.6978969816,0.7041394635,0.7043433559,0.6998865745,0.6970155344,0.7346902527,0.6935691426,0.7036891187,0.7061098906,0.7147868970,0.7158274700,0.7028339659,0.7081146239,0.7816522572,0.7053045327,0.7147167390,0.7046935589,0.7072233499,0.7036670262,0.6934175465,0.6964250185,0.7068953634,0.7036505900,0.7036835149,0.7029750214,0.7105297457,0.7146326896,0.7117553017,0.6993462808,0.7202812256,0.7042995072,0.7178442416,0.7175441988,0.7052572322,0.7181825556,0.7014383681,0.7088463812,0.7040371508,0.7106918329,0.6983398926,0.7141356820,0.7108543049,0.7229296104,0.6931120568,0.7083971184,0.6984093992,0.7041113464,0.7110467819,0.7137288531,0.7090255737,0.7138785493,0.7037622752,0.7047480951,0.7142762346,0.7086457003,0.6977489649,0.7228499104,0.7042354016,0.7211794793,0.7010745841,0.6986199008,0.6955432184,0.7071896664,0.7008055600,0.7055648367,0.7073897372,0.7217713922,0.7019025033,0.7022188943,0.6995073255,0.7028935565,0.6947643245,0.7072205472,0.7004575895,0.7107658343,0.6977244273,0.6987826883,0.7119367476,0.7174515744,0.7106876309,0.7054804742,0.7091940873,0.7247209512,0.7040659037,0.7040581249,0.7147189612,0.7155235411,0.7043920591,0.7147468607,0.7057149529,0.7218543553,0.7009433959,0.7079216396,0.7098831606,0.7161855308,0.7054670304,0.7043271646,0.7053787228,0.7134711946,0.6951013114,0.7139887357,0.7142340571,0.7199917078,0.7051937463,0.7170663226,0.7206157301,0.7227812644,0.7095608073,0.7160225503,0.7145648886,0.7149791146,0.7152535098,0.7256065509,0.7222277353,0.7423488491,0.7258160096,0.7248179469,0.7317174426,0.7375160977,0.7367642896,0.7394301713,0.7468672080,0.8010517144];

// X scale will fit all values from data[] within pixels 0-w
var x = d3.scale.linear().domain([0, data.length]).range([0, w]);
// Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)
var y = d3.scale.linear().domain([0, 1]).range([h, 0]);
// automatically determining max range can work something like this
// var y = d3.scale.linear().domain([0, d3.max(data)]).range([h, 0]);
// create a line function that can convert data[] into x and y points
var line = d3.svg.line()
// assign the X function to plot our line as we wish
.x(function(d,i) { 
    // verbose logging to show what's actually being done
    //console.log('Plotting X value for data point: ' + d + ' using index: ' + i + ' to be at: ' + x(i) + ' using our xScale.');
    // return the X coordinate where we want to plot this datapoint
    return x(i); 
})
.y(function(d) { 
    // verbose logging to show what's actually being done
    //console.log('Plotting Y value for data point: ' + d + ' to be at: ' + y(d) + " using our yScale.");
    // return the Y coordinate where we want to plot this datapoint
    return y(d); 
})

// Add an SVG element with the desired dimensions and margin.
var graph = d3.select("#graph").append("svg:svg")
    .attr("width", w + m[1] + m[3])
    .attr("height", h + m[0] + m[2])
    .append("svg:g")
    .attr("transform", "translate(" + m[3] + "," + m[0] + ")");
// create yAxis
var xAxis = d3.svg.axis().scale(x).ticks(30).tickSize(-h).tickSubdivide(true);
// Add the x-axis.
graph.append("svg:g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + h + ")")
    .call(xAxis);
// create left yAxis
var yAxisLeft = d3.svg.axis().scale(y).ticks(30).orient("left");
// Add the y-axis to the left
graph.append("svg:g")
    .attr("class", "y axis")
    .attr("transform", "translate(-25,0)")
    .call(yAxisLeft);

// Add the line by appending an svg:path element with the data line we created above
// do this AFTER the axes above so that the line is above the tick-lines
graph.append("svg:path").attr("d", line(data));

 //Create Title 
graph.append("text")
.attr("x", w / 2 )
.attr("y", 0)
.style("font-size", "20px") 
.style("text-anchor", "middle")
.text("75% of application/pdf");

d3.text("data.csv", function(text) {
    data = d3.csv.parseRows(text);
    //console.log(d3.csv.parseRows(data));
});