/* implementation heavily influenced by http://bl.ocks.org/1166403 */

// define dimensions of graph
var m = [80, 80, 80, 80]; // margins
var w = 1200 - m[1] - m[3]; // width
var h = 500 - m[0] - m[2]; // height


// create a simple data array that we'll plot with a line (this array represents only the Y values, X will just be the index location)
var data = [0.9895059568,0.6450390458,0.5775466516,0.5118828845,0.4673928384,0.4147901030,0.3547242640,0.3150565436,0.2706809302,0.2561511244,0.2244446769,0.2114230725,0.2319279464,0.2120606684,0.2345753639,0.2456246389,0.2619809554,0.2096253436,0.1816344371,0.1795812752,0.3137164896,0.1473874697,0.1722288524,0.1468182128,0.3328248013,0.1336451974,0.1389178668,0.1577303710,0.2862539099,0.1323634577,0.1419646051,0.2127743312,0.2827797592,0.1599299575,0.1689734364,0.1448670846,0.1957223493,0.1376671695,0.1038168475,0.1130317044,0.1384940456,0.1037676945,0.1006178323,0.0915455706,0.2056159767,0.0996281544,0.0994090968,0.1135070559,0.1709447131,0.1246563902,0.1226008666,0.1158779332,0.1457125471,0.0941273150,0.1132142913,0.0879250520,0.1225616348,0.0815039001,0.0781845200,0.0948245113,0.1538812973,0.0900217051,0.0978393425,0.2135294602,0.2217815102,0.2180080977,0.1836310757,0.1214233935,0.1803396082,0.1169697387,0.1537863980,0.1152664990,0.1338756276,0.0946028570,0.1281965119,0.1670706791,0.1292435250,0.0721972487,0.1067918860,0.0856053494,0.1148718571,0.0921163966,0.1184047236,0.0822810221,0.1191017248,0.0707518169,0.1080511707,0.0792414088,0.1000532612,0.0898725890,0.1008373964,0.0812648979,0.0942331334,0.0704524606,0.1033809714,0.0775898109,0.1147511422,0.0939102735,0.0916567544,0.1059640099,0.0946190404,0.0977131342,0.0902944612,0.0900661176,0.0997644380,0.0947999033,0.2012340840,0.1010617247,0.1110951606,0.1237107192,0.1228875545,0.1362490084,0.1407905390,0.1419044026,0.1749109011,0.1750760165,0.2156549765,0.2173315825,0.2652568020,0.2797259716,0.3102851959,0.3569584665,0.4203330928,0.4975918151,0.5617108040,0.6451510280,0.7641408060,0.9616281209,0.9972399587,0.7158549627,0.6041696134,0.5310139035,0.4559780812,0.3771067134,0.3263182081,0.2879464819,0.2642943082,0.2287678226,0.2415660720,0.1897554103,0.1610648977,0.1719030460,0.1417775159,0.1473018098,0.1275382468,0.1138851631,0.1234539704,0.1035788952,0.1108591327,0.1038208515,0.1727706218,0.1160894111,0.0917362375,0.0984184864,0.0932365558,0.0896391880,0.1038953248,0.0893887279,0.1089141560,0.0965789207,0.0763926765,0.1111078268,0.0727885120,0.1044171335,0.0737766141,0.0922307794,0.0799916764,0.0942076853,0.0896163335,0.1045119350,0.0669959097,0.1074462363,0.0714107064,0.1166165501,0.0734630224,0.1056984776,0.0937328457,0.0898014812,0.0828582109,0.0949566853,0.0699170728,0.1913330072,0.0675693397,0.0985801713,0.0693134474,0.0881002975,0.0908947092,0.0858724915,0.0822874109,0.0915071920,0.0816351492,0.2318907686,0.0797577622,0.1766257486,0.0658231334,0.0835142233,0.0818106865,0.0637276077,0.0797576623,0.0761208169,0.0686630739,0.0803691725,0.0732492529,0.0995004550,0.0787088701,0.0904153141,0.0996317432,0.0855672072,0.1121675501,0.0763507286,0.0687939152,0.0818107365,0.1154869400,0.0886244604,0.0693179196,0.0726816186,0.0861343485,0.0728563356,0.0876634673,0.0843001643,0.0979278086,0.1077559937,0.1010264387,0.1040870801,0.1302067618,0.1568512836,0.0908084768,0.0803253977,0.0886679940,0.0782719794,0.1039987382,0.0865273180,0.0908503897,0.1038239740,0.0927735067,0.1107243712,0.1312552608,0.1347058292,0.1617418839,0.1552779444,0.2267150437,0.1554093054,0.1496848347,0.1651464540,0.1840974374,0.1963819302,0.2240910382,0.2538207113,0.3081295588,0.3455033013,0.4036568325,0.4572817746,0.5064847206,0.5704375271,0.6019243256,0.9338759308];

// X scale will fit all values from data[] within pixels 0-w
var x = d3.scale.linear().domain([0, data.length]).range([0, w]);
// Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)
var y = d3.scale.linear().domain([0, 1]).range([h, 0]);
// automatically determining max range can work something like this
// var y = d3.scale.linear().domain([0, d3.max(data)]).range([h, 0]);
// create a line function that can convert data[] into x and y points
var line = d3.svg.line()
// assign the X function to plot our line as we wish
.x(function(d,i) { 
    // verbose logging to show what's actually being done
    //console.log('Plotting X value for data point: ' + d + ' using index: ' + i + ' to be at: ' + x(i) + ' using our xScale.');
    // return the X coordinate where we want to plot this datapoint
    return x(i); 
})
.y(function(d) { 
    // verbose logging to show what's actually being done
    //console.log('Plotting Y value for data point: ' + d + ' to be at: ' + y(d) + " using our yScale.");
    // return the Y coordinate where we want to plot this datapoint
    return y(d); 
})

// Add an SVG element with the desired dimensions and margin.
var graph = d3.select("#graph").append("svg:svg")
    .attr("width", w + m[1] + m[3])
    .attr("height", h + m[0] + m[2])
    .append("svg:g")
    .attr("transform", "translate(" + m[3] + "," + m[0] + ")");
// create yAxis
var xAxis = d3.svg.axis().scale(x).ticks(30).tickSize(-h).tickSubdivide(true);
// Add the x-axis.
graph.append("svg:g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + h + ")")
    .call(xAxis);
// create left yAxis
var yAxisLeft = d3.svg.axis().scale(y).ticks(30).orient("left");
// Add the y-axis to the left
graph.append("svg:g")
    .attr("class", "y axis")
    .attr("transform", "translate(-25,0)")
    .call(yAxisLeft);

// Add the line by appending an svg:path element with the data line we created above
// do this AFTER the axes above so that the line is above the tick-lines
graph.append("svg:path").attr("d", line(data));

 //Create Title 
graph.append("text")
.attr("x", w / 2 )
.attr("y", 0)
.style("font-size", "20px") 
.style("text-anchor", "middle")
.text("75% of audio/x-wav");

d3.text("data.csv", function(text) {
    data = d3.csv.parseRows(text);
    //console.log(d3.csv.parseRows(data));
});