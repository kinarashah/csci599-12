/* implementation heavily influenced by http://bl.ocks.org/1166403 */

// define dimensions of graph
var m = [80, 80, 80, 80]; // margins
var w = 1200 - m[1] - m[3]; // width
var h = 500 - m[0] - m[2]; // height


// create a simple data array that we'll plot with a line (this array represents only the Y values, X will just be the index location)
var data = [1.0000000000,0.7503974008,0.7508445590,0.7231612053,0.7425905539,0.7181818201,0.7139020435,0.6986286522,0.7378387664,0.7050895899,0.7085991006,0.6883165352,0.7024010289,0.6832871900,0.6807627742,0.6626674332,0.7353560871,0.6905189921,0.6902067178,0.6703971127,0.6931022244,0.6710392648,0.6755735656,0.6592333674,0.6985322265,0.6733773297,0.6757755147,0.6560841121,0.6781615302,0.6574580343,0.6565381001,0.6374141821,0.7831726666,0.6963997332,0.6914727693,0.6664714071,0.6872844092,0.6690680764,0.6708856726,0.6549128318,0.6986942484,0.6725152341,0.6738753476,0.6567380272,0.6811993488,0.6572978720,0.6611612930,0.6350271385,0.7085069868,0.6724461696,0.6692143287,0.6652676414,0.6700733154,0.6525264902,0.6575332859,0.6409729098,0.6851495588,0.6635360220,0.6614522559,0.6420559755,0.6590277871,0.6374448244,0.6404438529,0.6139734180,0.7364152277,0.6988117576,0.6941018695,0.6710045115,0.6897885371,0.6686328041,0.6747554180,0.6544033204,0.6963602965,0.6765012645,0.6767798509,0.6542131711,0.6748062623,0.6547736656,0.6538729689,0.6270326051,0.7084035094,0.6643909863,0.6707258362,0.6524866454,0.6701892584,0.6551504429,0.6570784776,0.6384005429,0.6806832476,0.6565943186,0.6614776722,0.6406750567,0.6606903712,0.6612626552,0.6420417887,0.6095562830,0.7134953140,0.6787492201,0.6670667162,0.6570483630,0.6742924937,0.6589518219,0.6668374419,0.6391445349,0.6810669673,0.6602093865,0.6604497470,0.6437803366,0.6617664825,0.6475318999,0.6447071551,0.6181121977,0.6980467669,0.6486639676,0.6601470825,0.6409943824,0.6625349052,0.6403455268,0.6403054410,0.6212987459,0.6693829070,0.6399337380,0.6398469433,0.6251528029,0.6444585242,0.6198625085,0.6150576380,0.5910520659,0.7430193871,0.7086570234,0.7046889652,0.6858848114,0.7014498720,0.6786884140,0.6768578582,0.6608941877,0.6965901710,0.6700677649,0.6732378272,0.6592503789,0.6774609462,0.6552631235,0.6527218764,0.6345929654,0.7088467325,0.6674821262,0.6674116415,0.6535705252,0.6763326051,0.6543170898,0.6557737614,0.6442610761,0.6818454714,0.6663147237,0.6577055763,0.6442668992,0.6669399662,0.6431418235,0.6399315447,0.6181186774,0.7163689785,0.6728333580,0.6668722315,0.6526251149,0.6722883362,0.6599380042,0.6583365811,0.6417283024,0.6771639384,0.6577689754,0.6647513655,0.6448030517,0.6610904438,0.6484669914,0.6417027018,0.6171639696,0.6961438680,0.6547176604,0.6556759716,0.6408044920,0.6601247082,0.6480627186,0.6470879441,0.6278128161,0.6659291214,0.6437736066,0.6475037627,0.6270004953,0.6455471503,0.6276612732,0.6198202361,0.5876401152,0.7229410952,0.6834308901,0.6747495903,0.6555447050,0.6709935761,0.6555795954,0.6560805369,0.6435469910,0.6823351994,0.6537138535,0.6588143411,0.6447786156,0.6640539675,0.6381520833,0.6390093237,0.6144266597,0.6909900205,0.6477380038,0.6508555416,0.6370526457,0.6552220769,0.6388080209,0.6423743313,0.6210785702,0.6633479855,0.6369329360,0.6420968103,0.6262822584,0.6455606747,0.6238262547,0.6243566474,0.5907710555,0.7006937043,0.6561469098,0.6495278038,0.6333894057,0.6508825085,0.6369461763,0.6406063698,0.6229644910,0.6611336589,0.6374059682,0.6404749623,0.6214729877,0.6376680381,0.6207616967,0.6169762905,0.5896989131,0.6770311571,0.6319590843,0.6285311770,0.6132201005,0.6314019270,0.6105079892,0.6158663159,0.5968231506,0.6463022839,0.6147993062,0.6131460836,0.5880144696,0.6148158308,0.5823256209,0.6308330523,0.7975005250];

// X scale will fit all values from data[] within pixels 0-w
var x = d3.scale.linear().domain([0, data.length]).range([0, w]);
// Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)
var y = d3.scale.linear().domain([0, 1]).range([h, 0]);
// automatically determining max range can work something like this
// var y = d3.scale.linear().domain([0, d3.max(data)]).range([h, 0]);
// create a line function that can convert data[] into x and y points
var line = d3.svg.line()
// assign the X function to plot our line as we wish
.x(function(d,i) { 
    // verbose logging to show what's actually being done
    //console.log('Plotting X value for data point: ' + d + ' using index: ' + i + ' to be at: ' + x(i) + ' using our xScale.');
    // return the X coordinate where we want to plot this datapoint
    return x(i); 
})
.y(function(d) { 
    // verbose logging to show what's actually being done
    //console.log('Plotting Y value for data point: ' + d + ' to be at: ' + y(d) + " using our yScale.");
    // return the Y coordinate where we want to plot this datapoint
    return y(d); 
})

// Add an SVG element with the desired dimensions and margin.
var graph = d3.select("#graph").append("svg:svg")
    .attr("width", w + m[1] + m[3])
    .attr("height", h + m[0] + m[2])
    .append("svg:g")
    .attr("transform", "translate(" + m[3] + "," + m[0] + ")");
// create yAxis
var xAxis = d3.svg.axis().scale(x).ticks(30).tickSize(-h).tickSubdivide(true);
// Add the x-axis.
graph.append("svg:g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + h + ")")
    .call(xAxis);
// create left yAxis
var yAxisLeft = d3.svg.axis().scale(y).ticks(30).orient("left");
// Add the y-axis to the left
graph.append("svg:g")
    .attr("class", "y axis")
    .attr("transform", "translate(-25,0)")
    .call(yAxisLeft);

// Add the line by appending an svg:path element with the data line we created above
// do this AFTER the axes above so that the line is above the tick-lines
graph.append("svg:path").attr("d", line(data));

 //Create Title 
graph.append("text")
.attr("x", w / 2 )
.attr("y", 0)
.style("font-size", "20px") 
.style("text-anchor", "middle")
.text("75% of image/gif");

d3.text("data.csv", function(text) {
    data = d3.csv.parseRows(text);
    //console.log(d3.csv.parseRows(data));
});