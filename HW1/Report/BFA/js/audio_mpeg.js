/* implementation heavily influenced by http://bl.ocks.org/1166403 */

// define dimensions of graph
var m = [80, 80, 80, 80]; // margins
var w = 1200 - m[1] - m[3]; // width
var h = 500 - m[0] - m[2]; // height


// create a simple data array that we'll plot with a line (this array represents only the Y values, X will just be the index location)
var data = [1.0000000000,0.6643890984,0.6552644352,0.6437915158,0.6565945707,0.6218275861,0.6632977260,0.5931819317,0.6535710296,0.6142626509,0.6206817857,0.5941906848,0.6555998735,0.6132856438,0.6159583626,0.5638523022,0.6527986375,0.6174417829,0.6236622599,0.5965178205,0.6304177200,0.6004329249,0.6026296570,0.5720174659,0.6594373748,0.6207775538,0.6123254637,0.6113975572,0.6153448460,0.5816045605,0.5826340681,0.5436929553,0.6640085087,0.6182298346,0.6284111575,0.6017753761,0.6348079325,0.5997913337,0.6146146050,0.5616433821,0.6371251603,0.6112528671,0.6192563258,0.5829765677,0.6188026709,0.5912666953,0.5946500930,0.5521100235,0.6662894120,0.6314294360,0.6266286343,0.6124814841,0.6196616448,0.5958438011,0.5745129429,0.5597520425,0.6242212257,0.5928872935,0.5878856415,0.5629274905,0.5888321907,0.5652205110,0.5491090952,0.5575942812,0.6605411263,0.6186682963,0.6220178298,0.6076071121,0.6247919109,0.6050739531,0.6099943191,0.5812339571,0.6336625060,0.6157295350,0.6193487573,0.5985146769,0.6373156695,0.6071148276,0.5804712196,0.5665219126,0.6345331789,0.6123280116,0.6329475517,0.6027474519,0.6155632086,0.6515672072,0.5979241307,0.5688102288,0.6140771633,0.6031665717,0.6026503726,0.5816663917,0.5895075506,0.5788719119,0.5527663896,0.5636169954,0.6828432554,0.6239145553,0.6175609749,0.6098497839,0.6157554195,0.6153637554,0.6142978718,0.5921077480,0.6033245401,0.6112589616,0.6078865643,0.5916289227,0.5824220856,0.5913158043,0.5753511966,0.5615737651,0.6164748733,0.5862515215,0.6095911697,0.5843618407,0.5848236518,0.5817733513,0.5701575565,0.5623693503,0.5648133152,0.5688992074,0.5715106016,0.5576078315,0.5344811963,0.5486652862,0.5328165224,0.6014321084,0.6981540728,0.6154280576,0.6091590644,0.6042580670,0.6091523875,0.5966194021,0.6094843117,0.5874164024,0.6238499042,0.6116910552,0.6091115960,0.5876040033,0.6266473659,0.5970403179,0.5836744690,0.5623616617,0.6189635772,0.6089416566,0.6503882311,0.5858363090,0.6103143026,0.6000947470,0.5963303569,0.5777308719,0.6276291644,0.6242765308,0.6037302533,0.5770293941,0.5799142804,0.5786391312,0.5562702005,0.5610770481,0.6253664144,0.6021147570,0.6065063395,0.5884070556,0.6096008025,0.6041421669,0.6133543547,0.5784215557,0.6048336128,0.6150000020,0.6435818831,0.5871470178,0.5928481788,0.6014483510,0.5643919392,0.5580486609,0.5835465918,0.5923525436,0.5936692621,0.5838836389,0.5747828923,0.5922919451,0.5735420783,0.5701990303,0.5629514875,0.5904925830,0.5757068694,0.5728680526,0.5464924370,0.5646556031,0.5376729075,0.5855904300,0.6597222707,0.5929832508,0.5920281392,0.6020507490,0.6193926788,0.5861754119,0.5985354423,0.5711878394,0.6080422832,0.5894556093,0.6008020469,0.5927780503,0.6196678556,0.5864723390,0.5815821412,0.5637356974,0.5885614248,0.5835878069,0.5853381736,0.5866700809,0.5998023117,0.5906141491,0.5886471188,0.5638436260,0.5603470887,0.5749486490,0.5719655085,0.5710963226,0.5622779176,0.5686883212,0.5461033110,0.5642372733,0.5711626792,0.5699591111,0.5719823075,0.5730418612,0.5677112193,0.5853750633,0.5872811404,0.5701990034,0.5723028049,0.5897120310,0.5886022331,0.5772981585,0.5625571566,0.5761602931,0.5606866782,0.5622020234,0.5837693077,0.5559498038,0.5551139998,0.5862763208,0.5656033053,0.5802312825,0.5493136764,0.5610147101,0.5260953951,0.5602280233,0.5903710467,0.6528211022,0.5479998977,0.5899592516,0.6021126829,0.8822277530];

// X scale will fit all values from data[] within pixels 0-w
var x = d3.scale.linear().domain([0, data.length]).range([0, w]);
// Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)
var y = d3.scale.linear().domain([0, 1]).range([h, 0]);
// automatically determining max range can work something like this
// var y = d3.scale.linear().domain([0, d3.max(data)]).range([h, 0]);
// create a line function that can convert data[] into x and y points
var line = d3.svg.line()
// assign the X function to plot our line as we wish
.x(function(d,i) { 
    // verbose logging to show what's actually being done
    //console.log('Plotting X value for data point: ' + d + ' using index: ' + i + ' to be at: ' + x(i) + ' using our xScale.');
    // return the X coordinate where we want to plot this datapoint
    return x(i); 
})
.y(function(d) { 
    // verbose logging to show what's actually being done
    //console.log('Plotting Y value for data point: ' + d + ' to be at: ' + y(d) + " using our yScale.");
    // return the Y coordinate where we want to plot this datapoint
    return y(d); 
})

// Add an SVG element with the desired dimensions and margin.
var graph = d3.select("#graph").append("svg:svg")
    .attr("width", w + m[1] + m[3])
    .attr("height", h + m[0] + m[2])
    .append("svg:g")
    .attr("transform", "translate(" + m[3] + "," + m[0] + ")");
// create yAxis
var xAxis = d3.svg.axis().scale(x).ticks(30).tickSize(-h).tickSubdivide(true);
// Add the x-axis.
graph.append("svg:g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + h + ")")
    .call(xAxis);
// create left yAxis
var yAxisLeft = d3.svg.axis().scale(y).ticks(30).orient("left");
// Add the y-axis to the left
graph.append("svg:g")
    .attr("class", "y axis")
    .attr("transform", "translate(-25,0)")
    .call(yAxisLeft);

// Add the line by appending an svg:path element with the data line we created above
// do this AFTER the axes above so that the line is above the tick-lines
graph.append("svg:path").attr("d", line(data));

 //Create Title 
graph.append("text")
.attr("x", w / 2 )
.attr("y", 0)
.style("font-size", "20px") 
.style("text-anchor", "middle")
.text("75% of audio/mpeg");

d3.text("data.csv", function(text) {
    data = d3.csv.parseRows(text);
    //console.log(d3.csv.parseRows(data));
});