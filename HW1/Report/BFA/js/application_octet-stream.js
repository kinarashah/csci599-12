/* implementation heavily influenced by http://bl.ocks.org/1166403 */

// define dimensions of graph
var m = [80, 80, 80, 80]; // margins
var w = 1200 - m[1] - m[3]; // width
var h = 500 - m[0] - m[2]; // height


// create a simple data array that we'll plot with a line (this array represents only the Y values, X will just be the index location)
var data = [1.0000000000,0.5415328786,0.3623819136,0.4308123273,0.3898746653,0.2282372385,0.1653265589,0.1510102889,0.5718324695,0.3868451174,0.5212542941,0.1921740440,0.1992793743,0.3892504419,0.1749550557,0.2723214018,0.4233161320,0.2112273687,0.2487801337,0.1429536656,0.1467785169,0.1651744763,0.1451370685,0.3960753924,0.2290724788,0.1833551678,0.1732845330,0.1419884611,0.3191436144,0.1634574829,0.1301634925,0.3041920925,0.8107002453,0.3197947228,0.4940654783,0.3604014815,0.3514897526,0.2811348195,0.2006383661,0.1919073722,0.2568202061,0.3840747029,0.1987072910,0.1123619376,0.2737948929,0.3543287959,0.3380301279,0.2894884748,0.4685625116,0.3336294498,0.2202505590,0.2166002189,0.1934091142,0.2060602785,0.1452290654,0.1488479429,0.1971005766,0.2296792458,0.3234967813,0.3106564142,0.3829472310,0.4341497247,0.2434092550,0.5358589949,0.5540123371,0.4305460247,0.2530030030,0.3742290409,0.4430313685,0.4887797121,0.3726698107,0.2862547800,0.4585662738,0.4172884686,0.2293891908,0.1845682081,0.3562063286,0.2894242106,0.2901900704,0.3238293195,0.3024982632,0.1727030931,0.2574429726,0.2995999240,0.3995998277,0.3541967456,0.1534926898,0.1613384050,0.2308658112,0.1440920746,0.1153871332,0.1419579314,0.2384252920,0.1544598923,0.1075998392,0.5750520679,0.2540462108,0.5457031335,0.2786372285,0.4803079406,0.4879974457,0.6375961506,0.4251947837,0.3973805163,0.3984518130,0.5818430827,0.1115271085,0.3243253623,0.4769755070,0.4674880710,0.5744020075,0.5707812111,0.3990969963,0.1137747457,0.5229115438,0.5645266091,0.5893591391,0.4070070550,0.2661413774,0.2532199520,0.2518162906,0.2908059566,0.1249630701,0.1117560606,0.1196762766,0.1484986407,0.1037701222,0.1525253516,0.4683920132,0.1607951767,0.1399310197,0.1889576819,0.1573091211,0.1996462210,0.1196966641,0.1249790864,0.1799234634,0.3585392883,0.1153180492,0.2722511711,0.1400074839,0.2522935398,0.1070964586,0.1324593962,0.2320484970,0.1216567351,0.1130312707,0.1282606101,0.1287242836,0.1276702405,0.1148191237,0.1237422932,0.1702008517,0.1277769983,0.1110776978,0.1204884446,0.1292861661,0.1055992555,0.1145579462,0.1371516164,0.2799341139,0.2230430955,0.1222267756,0.1760474448,0.2229055728,0.1455917166,0.1192595704,0.2233051014,0.1742544411,0.1199941392,0.1277042331,0.1189070941,0.1290524825,0.1065328916,0.1045617891,0.1520060539,0.2498315550,0.1841443162,0.1637903358,0.1530878050,0.1938803061,0.2667831668,0.1784923700,0.1894376511,0.2249666001,0.1653775420,0.1658073935,0.1985763102,0.1623374780,0.2473719428,0.3734602785,0.3270441944,0.4381991175,0.1973390867,0.1310341584,0.2760807293,0.3263901896,0.3564631522,0.3600601268,0.2126612728,0.1948281512,0.1183978149,0.1284661802,0.1467921112,0.1017671400,0.0928347126,0.1251824637,0.1343547397,0.2050817557,0.1084345315,0.1393966893,0.1270791823,0.1374951815,0.0955703290,0.1244784030,0.1139362557,0.1402958833,0.0964212679,0.1392335008,0.0941657312,0.0938824333,0.0754276490,0.1044281059,0.1257490620,0.2665307852,0.0975023958,0.0990884886,0.1249881295,0.1567871880,0.1169184984,0.0903349244,0.1039246619,0.3205629192,0.1261839323,0.0941053371,0.1475453866,0.1215273307,0.0985478900,0.0955705875,0.1116700942,0.1657548138,0.1073612859,0.1086071554,0.1179466147,0.1703979679,0.0879741689,0.1369067264,0.1392293208,0.1678392507,0.1014560472,0.1054456933,0.1203581092,0.1486733466,0.1365364086,0.1921576695,0.4749238842];

// X scale will fit all values from data[] within pixels 0-w
var x = d3.scale.linear().domain([0, data.length]).range([0, w]);
// Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)
var y = d3.scale.linear().domain([0, 1]).range([h, 0]);
// automatically determining max range can work something like this
// var y = d3.scale.linear().domain([0, d3.max(data)]).range([h, 0]);
// create a line function that can convert data[] into x and y points
var line = d3.svg.line()
// assign the X function to plot our line as we wish
.x(function(d,i) { 
    // verbose logging to show what's actually being done
    //console.log('Plotting X value for data point: ' + d + ' using index: ' + i + ' to be at: ' + x(i) + ' using our xScale.');
    // return the X coordinate where we want to plot this datapoint
    return x(i); 
})
.y(function(d) { 
    // verbose logging to show what's actually being done
    //console.log('Plotting Y value for data point: ' + d + ' to be at: ' + y(d) + " using our yScale.");
    // return the Y coordinate where we want to plot this datapoint
    return y(d); 
})

// Add an SVG element with the desired dimensions and margin.
var graph = d3.select("#graph").append("svg:svg")
    .attr("width", w + m[1] + m[3])
    .attr("height", h + m[0] + m[2])
    .append("svg:g")
    .attr("transform", "translate(" + m[3] + "," + m[0] + ")");
// create yAxis
var xAxis = d3.svg.axis().scale(x).ticks(30).tickSize(-h).tickSubdivide(true);
// Add the x-axis.
graph.append("svg:g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + h + ")")
    .call(xAxis);
// create left yAxis
var yAxisLeft = d3.svg.axis().scale(y).ticks(30).orient("left");
// Add the y-axis to the left
graph.append("svg:g")
    .attr("class", "y axis")
    .attr("transform", "translate(-25,0)")
    .call(yAxisLeft);

// Add the line by appending an svg:path element with the data line we created above
// do this AFTER the axes above so that the line is above the tick-lines
graph.append("svg:path").attr("d", line(data));

 //Create Title 
graph.append("text")
.attr("x", w / 2 )
.attr("y", 0)
.style("font-size", "20px") 
.style("text-anchor", "middle")
.text("25% of application/octet-stream");

d3.text("data.csv", function(text) {
    data = d3.csv.parseRows(text);
    //console.log(d3.csv.parseRows(data));
});