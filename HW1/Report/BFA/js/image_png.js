/* implementation heavily influenced by http://bl.ocks.org/1166403 */

// define dimensions of graph
var m = [80, 80, 80, 80]; // margins
var w = 1200 - m[1] - m[3]; // width
var h = 500 - m[0] - m[2]; // height


// create a simple data array that we'll plot with a line (this array represents only the Y values, X will just be the index location)
var data = [1.0000000000,0.8136077521,0.8045712920,0.7996889895,0.8030974560,0.7893696551,0.7955302535,0.7999667370,0.8123054392,0.7853573804,0.7919753518,0.7947978180,0.7985982828,0.7924916568,0.7969082288,0.8031736462,0.8122090217,0.7961549649,0.7896365062,0.7900849004,0.7964278650,0.7862680645,0.7942828289,0.8014545064,0.8041683842,0.7903471022,0.7965789659,0.7976509234,0.8053469090,0.7972997530,0.8018666157,0.8083407906,0.8979363277,0.7960471358,0.8048577170,0.7915794972,0.7985964749,0.7869611622,0.7933560441,0.7967360358,0.7970520039,0.7933271948,0.7912497180,0.7933234652,0.8027897876,0.7952284346,0.8024135210,0.8104606865,0.8036453619,0.8002696632,0.7973308628,0.8011381571,0.8026210014,0.7982365889,0.8021121426,0.8032681266,0.8069268679,0.8047836069,0.8075132623,0.8040557868,0.8110059499,0.8054476097,0.8125297090,0.8147278401,0.7994028527,0.7938738436,0.8021410204,0.7920490181,0.8082841271,0.7964552359,0.7950526837,0.8002927019,0.7934143997,0.8014238323,0.7974911697,0.7944801833,0.7952862740,0.8001924628,0.8009439086,0.8033682863,0.7889748096,0.7936823275,0.8015890210,0.7940940172,0.7977391488,0.7985267691,0.7978533302,0.8028735197,0.7996503515,0.8019009175,0.8023904360,0.7997674523,0.8019053967,0.8065253419,0.8104693749,0.8098342939,0.7979909081,0.7977829537,0.7968578568,0.8073574186,0.7996755296,0.8052503542,0.8039300191,0.8101979725,0.7963643714,0.8028948427,0.7995191757,0.8095416390,0.8032014488,0.8103952790,0.8066531340,0.8147936889,0.8030122814,0.8010392583,0.8048210714,0.8134259986,0.8085909969,0.8056948716,0.8079249033,0.8136732636,0.8134779201,0.8098173555,0.8062457296,0.8133485407,0.8114083851,0.8131361280,0.8141833292,0.8183311572,0.8069196497,0.7921947691,0.7900664320,0.7963343783,0.7945465659,0.7935030486,0.7945533012,0.8005653395,0.7971023116,0.7956412787,0.7940635258,0.8012183289,0.7963126529,0.8018380043,0.8057934784,0.8079458506,0.7851325081,0.7966358082,0.7959756980,0.8007694232,0.7937255057,0.7981292546,0.8015227841,0.8052288857,0.7891711393,0.8029845135,0.8012842688,0.8048858169,0.8030756080,0.8083536212,0.8099201105,0.8154625130,0.7849168520,0.7927283185,0.7926288517,0.8008587613,0.7874212023,0.8041251831,0.7991895909,0.8054985926,0.7835829359,0.7987196809,0.7995601928,0.8073282293,0.7969941125,0.8088650194,0.8093913995,0.8144212182,0.7915322967,0.8047327678,0.7979587822,0.8100359191,0.7922882968,0.8114348288,0.8068779510,0.8103090264,0.7923803593,0.8079398271,0.8047882727,0.8160601765,0.8090284639,0.8160754052,0.8141047009,0.8180118449,0.7994863326,0.7975924903,0.7881963143,0.8056337591,0.7906479240,0.8022836451,0.8053584050,0.8146964753,0.7901880809,0.8014195758,0.7945768767,0.8119993545,0.7976028543,0.8072233455,0.8118650702,0.8220972237,0.7899832557,0.8008689130,0.7934344254,0.8110988005,0.7902899817,0.8078571083,0.8074145489,0.8206452610,0.7989131877,0.8069412133,0.8026438799,0.8170555763,0.7987430345,0.8144555948,0.8139016271,0.8222752916,0.7993830868,0.8015077343,0.7981155605,0.8152202662,0.7972626644,0.8091601887,0.8039967181,0.8249233892,0.7962783448,0.8068710481,0.7992495007,0.8193851848,0.8052315081,0.8139514572,0.8104183852,0.8270367908,0.8027632915,0.8122805745,0.8059373133,0.8196845061,0.8028030945,0.8145759790,0.8111096117,0.8257750810,0.8080123915,0.8165883929,0.8113759481,0.8232795874,0.8134021372,0.8223054056,0.8210992400,0.8305471407];

// X scale will fit all values from data[] within pixels 0-w
var x = d3.scale.linear().domain([0, data.length]).range([0, w]);
// Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)
var y = d3.scale.linear().domain([0, 1]).range([h, 0]);
// automatically determining max range can work something like this
// var y = d3.scale.linear().domain([0, d3.max(data)]).range([h, 0]);
// create a line function that can convert data[] into x and y points
var line = d3.svg.line()
// assign the X function to plot our line as we wish
.x(function(d,i) { 
    // verbose logging to show what's actually being done
    //console.log('Plotting X value for data point: ' + d + ' using index: ' + i + ' to be at: ' + x(i) + ' using our xScale.');
    // return the X coordinate where we want to plot this datapoint
    return x(i); 
})
.y(function(d) { 
    // verbose logging to show what's actually being done
    //console.log('Plotting Y value for data point: ' + d + ' to be at: ' + y(d) + " using our yScale.");
    // return the Y coordinate where we want to plot this datapoint
    return y(d); 
})

// Add an SVG element with the desired dimensions and margin.
var graph = d3.select("#graph").append("svg:svg")
    .attr("width", w + m[1] + m[3])
    .attr("height", h + m[0] + m[2])
    .append("svg:g")
    .attr("transform", "translate(" + m[3] + "," + m[0] + ")");
// create yAxis
var xAxis = d3.svg.axis().scale(x).ticks(30).tickSize(-h).tickSubdivide(true);
// Add the x-axis.
graph.append("svg:g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + h + ")")
    .call(xAxis);
// create left yAxis
var yAxisLeft = d3.svg.axis().scale(y).ticks(30).orient("left");
// Add the y-axis to the left
graph.append("svg:g")
    .attr("class", "y axis")
    .attr("transform", "translate(-25,0)")
    .call(yAxisLeft);

// Add the line by appending an svg:path element with the data line we created above
// do this AFTER the axes above so that the line is above the tick-lines
graph.append("svg:path").attr("d", line(data));

 //Create Title 
graph.append("text")
.attr("x", w / 2 )
.attr("y", 0)
.style("font-size", "20px") 
.style("text-anchor", "middle")
.text("75% of image/png");

d3.text("data.csv", function(text) {
    data = d3.csv.parseRows(text);
    //console.log(d3.csv.parseRows(data));
});