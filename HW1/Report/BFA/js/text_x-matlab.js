/* implementation heavily influenced by http://bl.ocks.org/1166403 */

// define dimensions of graph
var m = [80, 80, 80, 80]; // margins
var w = 1200 - m[1] - m[3]; // width
var h = 500 - m[0] - m[2]; // height


// create a simple data array that we'll plot with a line (this array represents only the Y values, X will just be the index location)
var data = [0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.7294857854,0.7432420708,0.0000258890,0.0000000000,0.5907548817,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,1.0000000000,0.3544827427,0.7420289315,0.1433044247,0.2701445822,0.1807567428,0.4731065877,0.5802408704,0.7895860025,0.7903258078,0.2665715578,0.5182730937,0.7393522527,0.4529506203,0.8229341832,0.5092519016,0.5882174789,0.5215351491,0.4167332043,0.3491822586,0.3059501723,0.2896984541,0.2659945000,0.1866247780,0.2002287319,0.2096302871,0.5141208074,0.6735083185,0.2968640694,0.7601777929,0.3530989326,0.2829056669,0.0395571591,0.4054206009,0.3641302580,0.4303664944,0.3891312192,0.4602457472,0.3395606581,0.1701097806,0.2663333418,0.4485161838,0.0667123863,0.0943102559,0.3744209527,0.4179687971,0.3846547979,0.4032628909,0.3638451959,0.0915131767,0.3075210409,0.4478483330,0.4425829587,0.2810819860,0.1726369860,0.2120407053,0.0959253139,0.1093925088,0.0590256358,0.4809305925,0.3589405161,0.4806823677,0.0716316862,0.5846872317,0.0915952555,0.8976023799,0.6364888499,0.7845427345,0.7900057384,0.9860096481,0.7284056427,0.6740601027,0.7196088963,0.9035536852,0.4430826057,0.4456689659,0.8245197341,0.7261102966,0.9047558707,0.8791881926,0.7038540958,0.2533361325,0.8761540537,0.8652073527,0.9598715606,0.7725592163,0.6128305785,0.5397181018,0.4853501416,0.6030859003,0.2417131797,0.5904345030,0.4237109030,0.5902537325,0.0289174973,0.0000000000,0.0006990028,0.0002071119,0.0001035560,0.0001812229,0.0000776670,0.0001553340,0.0004401129,0.0001812229,0.0007507808,0.0004401129,0.0001035560,0.0001553340,0.0001812229,0.0003365569,0.0002847789,0.0002588899,0.0002847789,0.0002330009,0.0000517780,0.0000517780,0.0005436688,0.0002847789,0.0001294450,0.0001553340,0.0002330009,0.0007507808,0.0002588899,0.0001812229,0.0003883349,0.0000776670,0.0001553340,0.0001035560,0.0002847282,0.0005177799,0.0000258890,0.0000000000,0.0000776670,0.0000776670,0.0004142239,0.0002588899,0.0004401129,0.0001553340,0.0000000000,0.0000517780,0.0002330009,0.0002071119,0.0001035560,0.0004401129,0.0008802257,0.0000258890,0.0002588899,0.0000776670,0.0000517780,0.0000000000,0.0000258890,0.0004142239,0.0003624459,0.0003883349,0.0004401129,0.0008283970,0.0005954468,0.0011908937,0.0000517780,0.0011908429,0.0000776670,0.0000776670,0.0013461769,0.0006990028,0.0000776670,0.0000258890,0.0000000000,0.0000776670,0.0000776670,0.0000776670,0.0000776670,0.0000776670,0.0000776670,0.0000776670,0.0000776670,0.0000776670,0.0000000000,0.0000776670,0.0000776670,0.0000776670,0.0000776670,0.0000776670,0.0000776670,0.0000000000,0.0000000000,0.0000776670,0.0000776670,0.0000776670,0.0001035560,0.0000776670,0.0000000000,0.0000258890,0.0000776670,0.0001294450,0.0007507808,0.0002071119,0.0010614487,0.0019675634,0.0016310065,0.0008543368,0.0006213358,0.0002071119,0.0000776670,0.0001035560,0.0001812229,0.0001553340,0.0000776670,0.0012943989,0.0000000000,0.0000776670,0.0000776670,0.0000776670,0.0000776670,0.0000776670,0.0000776670,0.0000000000,0.0000000000,0.0000776670,0.0000776670,0.0000776670,0.0001035560,0.0000776670,0.0000000000,0.0000776670];

// X scale will fit all values from data[] within pixels 0-w
var x = d3.scale.linear().domain([0, data.length]).range([0, w]);
// Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)
var y = d3.scale.linear().domain([0, 1]).range([h, 0]);
// automatically determining max range can work something like this
// var y = d3.scale.linear().domain([0, d3.max(data)]).range([h, 0]);
// create a line function that can convert data[] into x and y points
var line = d3.svg.line()
// assign the X function to plot our line as we wish
.x(function(d,i) { 
    // verbose logging to show what's actually being done
    //console.log('Plotting X value for data point: ' + d + ' using index: ' + i + ' to be at: ' + x(i) + ' using our xScale.');
    // return the X coordinate where we want to plot this datapoint
    return x(i); 
})
.y(function(d) { 
    // verbose logging to show what's actually being done
    //console.log('Plotting Y value for data point: ' + d + ' to be at: ' + y(d) + " using our yScale.");
    // return the Y coordinate where we want to plot this datapoint
    return y(d); 
})

// Add an SVG element with the desired dimensions and margin.
var graph = d3.select("#graph").append("svg:svg")
    .attr("width", w + m[1] + m[3])
    .attr("height", h + m[0] + m[2])
    .append("svg:g")
    .attr("transform", "translate(" + m[3] + "," + m[0] + ")");
// create yAxis
var xAxis = d3.svg.axis().scale(x).ticks(30).tickSize(-h).tickSubdivide(true);
// Add the x-axis.
graph.append("svg:g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + h + ")")
    .call(xAxis);
// create left yAxis
var yAxisLeft = d3.svg.axis().scale(y).ticks(30).orient("left");
// Add the y-axis to the left
graph.append("svg:g")
    .attr("class", "y axis")
    .attr("transform", "translate(-25,0)")
    .call(yAxisLeft);

// Add the line by appending an svg:path element with the data line we created above
// do this AFTER the axes above so that the line is above the tick-lines
graph.append("svg:path").attr("d", line(data));

 //Create Title 
graph.append("text")
.attr("x", w / 2 )
.attr("y", 0)
.style("font-size", "20px") 
.style("text-anchor", "middle")
.text("75% of text/x-matlab");

d3.text("data.csv", function(text) {
    data = d3.csv.parseRows(text);
    //console.log(d3.csv.parseRows(data));
});